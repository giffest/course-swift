import UIKit

// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 3
/* 1. –û–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä ‚Äì –ª—é–±–æ–π –ª–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –ª—é–±–æ–π –≥—Ä—É–∑–æ–≤–∏–∫.
 
 2. –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞/–∫—É–∑–æ–≤–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å, –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏ –æ–∫–Ω–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞.
 
 3. –û–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º: –∑–∞–ø—É—Å—Ç–∏—Ç—å/–∑–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å, –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–∞, –ø–æ–≥—Ä—É–∑–∏—Ç—å/–≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—É–∑–æ–≤–∞/–±–∞–≥–∞–∂–Ω–∏–∫–∞ –≥—Ä—É–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞.
 
 4. –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–æ–¥ —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ç–∏–ø–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
 
 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
 
 6. –í—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
 */

// 1. –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—Ä—É –ª–µ–≥–∫–æ–≤–æ–≥–æ –∏ –≥—Ä—É–∑–æ–≤–æ–≥–æ –∞–≤—Ç–æ

///* –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
struct Explorer {
    let color: UIColor
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var doorState: String
}
 
struct Transit {
    let color: UIColor
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var doorState: String
}

var car = Explorer(color: .black, Media: true, transmission: "auto", disk: 20, ABS: true, ESP: true, RSC: true, HSA: true, LAC: false, ROM: false, km: 0.0, doorState: "closed")
var truck = Transit(color: .white, Media: true, transmission: "manual", disk: 16, ABS: true, ESP: true, RSC: false, HSA: true, LAC: true, ROM: true, km: 0.0, doorState: "closed")


// 2.
struct Explorer2 {
    let brand: String // –º–∞—Ä–∫–∞
    let color: UIColor
    let yearManuf: Int // –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    let trunkVol: Int // –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var engineState: String // —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
    var windowState: String // —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω
    var doorState: String
    var trunckState: String // —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–∞–≥–∞–∂–Ω–∏–∫–∞
}

struct Transit2 {
    let brand: String // –º–∞—Ä–∫–∞
    let color: UIColor
    let yearManuf: Int // –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    let trunkVol: Int // –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var engineState: String // —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
    var windowState: String // —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω
    var doorState: String
    var trunckState: String // —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–∞–≥–∞–∂–Ω–∏–∫–∞
}

var car2 = Explorer2(brand: "Ford", color: .black, yearManuf: 2017, trunkVol: 595, Media: true, transmission: "Auto", disk: 20, ABS: true, ESP: true, RSC: true, HSA: true, LAC: false, ROM: false, km: 0.0, engineState: "Start", windowState: "Closed", doorState: "Closed", trunckState: "Half")
var truck2 = Transit2(brand: "Ford", color: .white, yearManuf: 2015, trunkVol: 4500, Media: true, transmission: "Manual", disk: 16, ABS: true, ESP: true, RSC: false, HSA: true, LAC: true, ROM: true, km: 0.0, engineState: "Stop", windowState: "Open", doorState: "Closed", trunckState: "Full")

// 3.

enum engineState: String {
    case Start = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å"
    case Stop = "–ó–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å"
}

enum windowState: String {
    case Open = "–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–∞"
    case Close = "–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–∞"
}

enum cargoCar {
    case valueCargo(weight: Int)
    case actionCargo(action: Action, place: Place)
    
    enum Action: String {
        case load = "–ü–æ–≥—Ä—É–∑–∫–∞"
        case upload = "–í—ã–≥—Ä—É–∑–∫–∞"
    }
    enum Place: String {
        case body = "–ö—É–∑–æ–≤"
        case truck = "–ë–∞–≥–∞–∂–Ω–∏–∫"
    }
}

// 4.
struct Explorer4 {
    let brand: String // –º–∞—Ä–∫–∞
    let color: UIColor
    let yearManuf: Int // –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    let trunkVol: Int // –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var engineState: engineState // —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
    var windowState: windowState // —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω
    var doorState: String
    var trunckState: String // —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–∞–≥–∞–∂–Ω–∏–∫–∞
    
    mutating func startEngine() {
        self.engineState = .Start
    }
    mutating func stopEngine() {
        self.engineState = .Stop
    }
    mutating func openState() {
        self.windowState = .Open
    }
    mutating func closeState() {
        self.windowState = .Close
    }
    func discription() {
        print("–ú–∞—à–∏–Ω–∞ \(self.brand) \(self.yearManuf) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞ \(self.trunkVol), –¥–≤–∏–≥–∞—Ç–µ–ª—å: \(self.engineState), –æ–∫–Ω–∞: \(self.windowState)\n")
    }
}
struct Transit4 {
    let brand: String // –º–∞—Ä–∫–∞
    let color: UIColor
    let yearManuf: Int // –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    let trunkVol: Int // –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞
    let Media: Bool
    let transmission: String
    let disk: Double
    let ABS: Bool
    let ESP: Bool
    let RSC: Bool
    let HSA: Bool
    let LAC: Bool
    let ROM: Bool
    var km: Double
    var engineState: engineState // —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
    var windowState: windowState // —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω
    var doorState: String
    var trunckState: String // —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–∞–≥–∞–∂–Ω–∏–∫–∞
    
    mutating func startEngine() {
        self.engineState = .Start
    }
    mutating func stopEngine() {
        self.engineState = .Stop
    }
    mutating func openState() {
        self.windowState = .Open
    }
    mutating func closeState() {
        self.windowState = .Close
    }
    func discription() {
        print("–ú–∞—à–∏–Ω–∞ \(self.brand) \(self.yearManuf) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞ \(self.trunkVol), –¥–≤–∏–≥–∞—Ç–µ–ª—å: \(self.engineState), –æ–∫–Ω–∞: \(self.windowState)\n")
    }
}


// 5.
var car5 = Explorer4(brand: "Ford", color: .black, yearManuf: 2017, trunkVol: 595, Media: true, transmission: "Auto", disk: 20, ABS: true, ESP: true, RSC: true, HSA: true, LAC: false, ROM: false, km: 0.0, engineState: .Start, windowState: .Close, doorState: "Closed", trunckState: "Half")
var truck5 = Transit4(brand: "Ford", color: .white, yearManuf: 2015, trunkVol: 4500, Media: true, transmission: "Manual", disk: 16, ABS: true, ESP: true, RSC: false, HSA: true, LAC: true, ROM: true, km: 0.0, engineState: .Stop, windowState: .Open, doorState: "Closed", trunckState: "Full")
car5.engineState = .Stop
truck5.windowState = .Close
car5.discription()
truck5.discription()

// –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
import Foundation

enum VehicleType: CustomStringConvertible {
    case passengerCar, truck
    
    var description: String {
        switch self {
        case .passengerCar:
            return "üöó"
        case .truck:
            return "üöõ"
        }
    }
}

enum EngineStatus: CustomStringConvertible {
    case on, off
    
    var description: String {
        switch self {
        case .on:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥—ë–Ω"
        case .off:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω"
        }
    }
}

enum WindowsStatus: CustomStringConvertible {
    case opened, closed
    
    var description: String {
        switch self {
        case .opened:
            return "–û–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã"
        case .closed:
            return "–û–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã"
        }
    }
}

enum Action {
    case switchEngine(EngineStatus)
    case switchWindows(WindowsStatus)
    case loadCargo(Double)
}

struct Vehicle: CustomStringConvertible {
    let type: VehicleType
    let brand: String
    let productionYear: Int
    let maxCargoSpace: Double
    var engine: EngineStatus = .off
    var windows: WindowsStatus = .closed
    var currentCargoSpace: Double = 0
    
    var description: String {
        return "\(type) \(brand)\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(productionYear)\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: \(engine) | \(windows) | –ó–∞–≥—Ä—É–∑–∫–∞ \(currentCargoSpace)/\(maxCargoSpace)\n"
    }
    
    init(type:VehicleType, brand: String, productionYear:Int, maxCargoSpace:Double) {
        self.type = type
        self.brand = brand
        self.productionYear = productionYear
        self.maxCargoSpace = maxCargoSpace
    }
    
    mutating func perform(action: Action) {
        switch action {
        case .switchEngine(let status):
            engine = status
        case .switchWindows(let status):
            windows = status
        case .loadCargo(let load):
            let expectedLoad = load + currentCargoSpace
            switch expectedLoad {
            case _ where expectedLoad > maxCargoSpace:
                currentCargoSpace = maxCargoSpace
            case _ where expectedLoad < 0:
                currentCargoSpace = 0
            default:
                currentCargoSpace += load
            }
        }
    }
}

var honda = Vehicle(type: .passengerCar, brand: "Honda Civic", productionYear: 2017, maxCargoSpace: 15.1)
honda.perform(action: .loadCargo(7.6))
honda.perform(action: .loadCargo(-3))
honda.perform(action: .switchEngine(.on))
print(honda)

var manTruck = Vehicle(type: .truck, brand: "MAN LION PRO 640", productionYear: 2019, maxCargoSpace:3000)
manTruck.perform(action: .switchWindows(.opened))
manTruck.perform(action: .loadCargo(3001))
print(manTruck)

